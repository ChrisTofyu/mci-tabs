'use strict';

var fs = require('fs');
var purgecss = require('purgecss');
var rollupPluginutils = require('rollup-pluginutils');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var fs__namespace = /*#__PURE__*/_interopNamespaceDefault(fs);

/**
 *
 * @param options - options
 * @returns
 *
 * @public
 */
function pluginPurgeCSS(options) {
    const filter = rollupPluginutils.createFilter(options.include || ["**/*.css"], options.exclude || "node_modules/**");
    const styles = [];
    let dest = "";
    return {
        name: "purgecss",
        transform: async (code, id) => {
            if (!filter(id))
                return null;
            const v = await new purgecss.PurgeCSS().purge({
                content: options.content,
                css: [
                    {
                        raw: code,
                    },
                ],
            });
            let css = v[0].css;
            styles.push(css);
            css = JSON.stringify(css);
            if (options.insert) ;
            else if (!options.output) {
                code = css;
            }
            else {
                code = `"";`;
            }
            return {
                code: `export default ${code}`,
                map: { mappings: "" },
            };
        },
        generateBundle() {
            if (!options.insert && (!styles.length || options.output === false)) {
                return;
            }
            const css = styles.reduce((acc, value) => {
                return acc + value;
            }, "");
            if (typeof options.output === "string") {
                return fs__namespace.writeFileSync(options.output, css);
            }
            if (typeof options.output === "function") {
                return options.output(css, styles);
            }
            if (!options.insert && dest) {
                if (dest.endsWith(".js") || dest.endsWith(".ts")) {
                    dest = dest.slice(0, -3);
                }
                dest = `${dest}.css`;
                return fs__namespace.writeFileSync(dest, css);
            }
        },
    };
}

module.exports = pluginPurgeCSS;
