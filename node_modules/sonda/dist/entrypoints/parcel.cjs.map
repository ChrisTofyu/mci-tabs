{"version":3,"file":"parcel.cjs","names":["opts: ReporterOpts","SondaParcelPlugin: Reporter","inputs: JsonReport[ 'inputs' ]","assets: Array<string>","input: ReportInput","path: string","path"],"sources":["../../src/entrypoints/parcel.ts"],"sourcesContent":["import { join, relative, resolve } from 'path';\nimport type { Reporter as ReporterOpts } from '@parcel/types';\nimport {\n  generateReportFromAssets,\n  normalizePath,\n  type JsonReport,\n  type ReportInput,\n  type UserOptions\n} from '../index.js';\n\nclass Reporter {\n  constructor ( opts: ReporterOpts ) {\n    // @ts-ignore\n    this[ Symbol.for( 'parcel-plugin-config' ) ] = opts;\n  }\n}\n\nconst SondaParcelPlugin: Reporter = new Reporter( {\n  // @ts-ignore\n  async loadConfig( { config } ): Promise<UserOptions> {\n  // @ts-ignore\n    const conf = await config.getConfig<UserOptions>( [\n      resolve( '.sondarc' ),\n      resolve( '.sondarc.js' ),\n      resolve( 'sonda.config.js' ),\n    ], {} );\n\n    return conf!.contents;\n  },\n  async report( { event, options } ) {\n    if ( event.type !== 'buildSuccess' ) {\n      return;\n    }\n\n    let inputs: JsonReport[ 'inputs' ] = {};\n    const assets: Array<string> = [];\n\n    for ( let bundle of event.bundleGraph.getBundles() ) {\n      assets.push( bundle.filePath );\n\n      // @ts-ignore\n      bundle.traverseAssets( asset => {\n        const input: ReportInput = {\n          bytes: asset.stats.size,\n\n          // TODO: What abount 'unknown'?\n          format: asset.meta.hasCJSExports ? 'cjs' : 'esm',\n          imports: [],\n          belongsTo: null,\n        }\n\n        for ( let dep of event.bundleGraph.getDependencies( asset ) ) {\n          let resolved = event.bundleGraph.getResolvedAsset( dep, bundle )!;\n\n          if ( resolved ) {\n            input.imports.push( normalizePath( relative( process.cwd(), resolved.filePath ) ) );\n          }\n        }\n        \n        inputs[ normalizePath( relative( process.cwd(), asset.filePath ) ) ] = input;\n      } );\n    }\n\n    return generateReportFromAssets(\n      assets,\n      inputs,\n      // TODO: Use user provided options\n      {\n        format: 'html',\n        detailed: true,\n        sources: true,\n        gzip: true,\n        brotli: true,\n        // TODO: `resolve` instead of `join`?\n        sourcesPathNormalizer: ( path: string ) => join( options.projectRoot, path ),\n      }\n    );\n  }\n} );\n\nexport default SondaParcelPlugin;\n"],"mappings":";;;;;IAUM,WAAN,MAAe;CACb,YAAcA,MAAqB;AAEjC,OAAM,OAAO,IAAK,uBAAwB,IAAK;CAChD;AACF;AAED,MAAMC,oBAA8B,IAAI,SAAU;CAEhD,MAAM,WAAY,EAAE,QAAQ,EAAyB;EAEnD,MAAM,OAAO,MAAM,OAAO,UAAwB;GAChD,kBAAS,WAAY;GACrB,kBAAS,cAAe;GACxB,kBAAS,kBAAmB;EAC7B,GAAE,CAAE,EAAE;AAEP,SAAO,KAAM;CACd;CACD,MAAM,OAAQ,EAAE,OAAO,SAAS,EAAG;AACjC,MAAK,MAAM,SAAS,eAClB;EAGF,IAAIC,SAAiC,CAAE;EACvC,MAAMC,SAAwB,CAAE;AAEhC,OAAM,IAAI,UAAU,MAAM,YAAY,YAAY,EAAG;AACnD,UAAO,KAAM,OAAO,SAAU;AAG9B,UAAO,eAAgB,WAAS;IAC9B,MAAMC,QAAqB;KACzB,OAAO,MAAM,MAAM;KAGnB,QAAQ,MAAM,KAAK,gBAAgB,QAAQ;KAC3C,SAAS,CAAE;KACX,WAAW;IACZ;AAED,SAAM,IAAI,OAAO,MAAM,YAAY,gBAAiB,MAAO,EAAG;KAC5D,IAAI,WAAW,MAAM,YAAY,iBAAkB,KAAK,OAAQ;AAEhE,SAAK,SACH,OAAM,QAAQ,KAAM,0BAAe,mBAAU,QAAQ,KAAK,EAAE,SAAS,SAAU,CAAE,CAAE;IAEtF;AAED,WAAQ,0BAAe,mBAAU,QAAQ,KAAK,EAAE,MAAM,SAAU,CAAE,IAAK;GACxE,EAAE;EACJ;AAED,SAAO;GACL;GACA;;GAEA;IACE,QAAQ;IACR,UAAU;IACV,SAAS;IACT,MAAM;IACN,QAAQ;IAER,uBAAuB,CAAEC,WAAkB,eAAM,QAAQ,aAAaC,OAAM;GAC7E;CACF;CACF;AACF;qBAEc"}