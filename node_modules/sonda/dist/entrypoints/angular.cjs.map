{"version":3,"file":"angular.cjs","names":["options: Partial<AngularUserOptions>","paths: Paths","path: string","path","metafile: Metafile"],"sources":["../../src/entrypoints/angular.ts"],"sourcesContent":["import { readFileSync, readdirSync } from 'fs';\nimport { basename, relative, resolve } from 'path';\nimport type { UserOptions } from '../types';\nimport type { Metafile } from 'esbuild';\nimport { processEsbuildMetaFile } from './esbuild';\n\ninterface AngularUserOptions extends UserOptions {\n  config: string;\n  projects: string[];\n}\n\ninterface Paths {\n  base: string;\n  browser: string;\n  server: string;\n}\n\nexport default function SondaAngular( options: Partial<AngularUserOptions> = {} ): void {\n  const cwd = process.cwd();\n  const {\n    config = 'angular.json',\n    projects = [],\n    ...opts\n  } = options;\n\n  opts.format ??= 'html';\n  opts.filename ??= `sonda-report-[project].${ opts.format }`;\n\n  // Angular workspaces can have multiple projects, so we need to generate a report for each\n  if ( !opts.filename.includes( '[project]' ) ) {\n    throw new Error( 'SondaAngular: The \"filename\" option must include the \"[project]\" token.' );\n  }\n\n  const angularConfig = loadJson( config );\n  const projectsToGenerate = projects.length ? projects : Object.keys( angularConfig.projects );\n\n  for ( const project of projectsToGenerate ) {\n    const { outputPath } = angularConfig.projects[ project ].architect.build.options;\n    const paths: Paths = typeof outputPath === 'object'\n      ? outputPath\n      : { base: outputPath };\n\n    paths.base = resolve( cwd, paths.base );\n    paths.browser = resolve( paths.base, paths.browser || 'browser' );\n    paths.server = resolve( paths.base, paths.server || 'server' );\n\n    const metafile = updateMetafile(\n      loadJson<Metafile>( resolve( paths.base, 'stats.json' ) ),\n      paths\n    );\n\n    // Because this configuration is shared between multiple projects, we need to clone it\n    const sondaOptions = Object.assign( {}, opts );\n\n    // Replace the \"[project]\" token with the current project name\n    sondaOptions.filename = sondaOptions.filename!.replace( '[project]', project );\n\n    processEsbuildMetaFile( metafile, sondaOptions );\n  }\n}\n\nfunction loadJson<T extends any = any>( path: string ): T {\n  return JSON.parse(\n    readFileSync( resolve( process.cwd(), path ), 'utf8' )\n  );\n}\n\n/**\n * Output paths in metafile only include file name, without the relative path from the current\n * working directory. For example, in the metafile the output path is \"main-xxx.js\", but in the\n * file system it's \"dist/project/browser/en/main-xxx.js\". This function updates the output paths\n * to include the relative path from the current working directory.\n */\nfunction updateMetafile(\n  metafile: Metafile,\n  paths: Paths\n): Metafile {\n  const cwd = process.cwd();\n\n  // Clone the original outputs object\n  const outputs = Object.assign( {}, metafile.outputs );\n\n  // Reset the outputs\n  metafile.outputs = {};\n\n  for ( const path of readdirSync( paths.base, { encoding: 'utf8', recursive: true } ) ) {\n    const absolutePath = resolve( paths.base, path );\n    const filename = basename( absolutePath );\n    const originalOutput = outputs[ filename ];\n\n    // If the output file name exists in the original outputs, add the updated relative path\n    if ( originalOutput ) {\n      metafile.outputs[ relative( cwd, absolutePath ) ] = originalOutput;\n    }\n  }\n\n  return metafile;\n}\n"],"mappings":";;;;;;;AAiBe,SAAS,aAAcA,UAAuC,CAAE,GAAS;CACtF,MAAM,MAAM,QAAQ,KAAK;CACzB,MAAM,EACJ,SAAS,gBACT,WAAW,CAAE,EACb,GAAG,MACJ,GAAG;AAEJ,MAAK,WAAW;AAChB,MAAK,cAAc,yBAA0B,KAAK,OAAQ;AAG1D,MAAM,KAAK,SAAS,SAAU,YAAa,CACzC,OAAM,IAAI,MAAO;CAGnB,MAAM,gBAAgB,SAAU,OAAQ;CACxC,MAAM,qBAAqB,SAAS,SAAS,WAAW,OAAO,KAAM,cAAc,SAAU;AAE7F,MAAM,MAAM,WAAW,oBAAqB;EAC1C,MAAM,EAAE,YAAY,GAAG,cAAc,SAAU,SAAU,UAAU,MAAM;EACzE,MAAMC,eAAsB,eAAe,WACvC,aACA,EAAE,MAAM,WAAY;AAExB,QAAM,OAAO,kBAAS,KAAK,MAAM,KAAM;AACvC,QAAM,UAAU,kBAAS,MAAM,MAAM,MAAM,WAAW,UAAW;AACjE,QAAM,SAAS,kBAAS,MAAM,MAAM,MAAM,UAAU,SAAU;EAE9D,MAAM,WAAW,eACf,SAAoB,kBAAS,MAAM,MAAM,aAAc,CAAE,EACzD,MACD;EAGD,MAAM,eAAe,OAAO,OAAQ,CAAE,GAAE,KAAM;AAG9C,eAAa,WAAW,aAAa,SAAU,QAAS,aAAa,QAAS;AAE9E,yCAAwB,UAAU,aAAc;CACjD;AACF;AAED,SAAS,SAA+BC,QAAkB;AACxD,QAAO,KAAK,MACV,qBAAc,kBAAS,QAAQ,KAAK,EAAEC,OAAM,EAAE,OAAQ,CACvD;AACF;;;;;;;AAQD,SAAS,eACPC,UACAH,OACU;CACV,MAAM,MAAM,QAAQ,KAAK;CAGzB,MAAM,UAAU,OAAO,OAAQ,CAAE,GAAE,SAAS,QAAS;AAGrD,UAAS,UAAU,CAAE;AAErB,MAAM,MAAME,UAAQ,oBAAa,MAAM,MAAM;EAAE,UAAU;EAAQ,WAAW;CAAM,EAAE,EAAG;EACrF,MAAM,eAAe,kBAAS,MAAM,MAAMA,OAAM;EAChD,MAAM,WAAW,mBAAU,aAAc;EACzC,MAAM,iBAAiB,QAAS;AAGhC,MAAK,eACH,UAAS,QAAS,mBAAU,KAAK,aAAc,IAAK;CAEvD;AAED,QAAO;AACR"}