import "../src.mjs";
import { processEsbuildMetaFile } from "../esbuild.mjs";
import { basename, relative, resolve } from "path";
import { readFileSync, readdirSync } from "fs";

//#region src/entrypoints/angular.ts
function SondaAngular(options = {}) {
	const cwd = process.cwd();
	const { config = "angular.json", projects = [],...opts } = options;
	opts.format ??= "html";
	opts.filename ??= `sonda-report-[project].${opts.format}`;
	if (!opts.filename.includes("[project]")) throw new Error("SondaAngular: The \"filename\" option must include the \"[project]\" token.");
	const angularConfig = loadJson(config);
	const projectsToGenerate = projects.length ? projects : Object.keys(angularConfig.projects);
	for (const project of projectsToGenerate) {
		const { outputPath } = angularConfig.projects[project].architect.build.options;
		const paths = typeof outputPath === "object" ? outputPath : { base: outputPath };
		paths.base = resolve(cwd, paths.base);
		paths.browser = resolve(paths.base, paths.browser || "browser");
		paths.server = resolve(paths.base, paths.server || "server");
		const metafile = updateMetafile(loadJson(resolve(paths.base, "stats.json")), paths);
		const sondaOptions = Object.assign({}, opts);
		sondaOptions.filename = sondaOptions.filename.replace("[project]", project);
		processEsbuildMetaFile(metafile, sondaOptions);
	}
}
function loadJson(path) {
	return JSON.parse(readFileSync(resolve(process.cwd(), path), "utf8"));
}
/**
* Output paths in metafile only include file name, without the relative path from the current
* working directory. For example, in the metafile the output path is "main-xxx.js", but in the
* file system it's "dist/project/browser/en/main-xxx.js". This function updates the output paths
* to include the relative path from the current working directory.
*/
function updateMetafile(metafile, paths) {
	const cwd = process.cwd();
	const outputs = Object.assign({}, metafile.outputs);
	metafile.outputs = {};
	for (const path of readdirSync(paths.base, {
		encoding: "utf8",
		recursive: true
	})) {
		const absolutePath = resolve(paths.base, path);
		const filename = basename(absolutePath);
		const originalOutput = outputs[filename];
		if (originalOutput) metafile.outputs[relative(cwd, absolutePath)] = originalOutput;
	}
	return metafile;
}

//#endregion
export { SondaAngular as default };
//# sourceMappingURL=angular.mjs.map