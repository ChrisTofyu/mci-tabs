import { addSourcesToInputs, generateReportFromAssets } from "./src.mjs";
import { resolve } from "path";

//#region src/entrypoints/esbuild.ts
function SondaEsbuildPlugin(options = {}) {
	return {
		name: "sonda",
		setup(build) {
			if (options.enabled === false) return;
			build.initialOptions.metafile = true;
			options.detailed = false;
			build.onEnd((result) => processEsbuildMetaFile(result.metafile, options));
		}
	};
}
function processEsbuildMetaFile(metafile, options) {
	const cwd = process.cwd();
	const inputs = Object.entries(metafile.inputs).reduce((acc, [path, data]) => {
		acc[path] = {
			bytes: data.bytes,
			format: data.format ?? "unknown",
			imports: data.imports.map((data$1) => data$1.path),
			belongsTo: null
		};
		/**
		* Because esbuild already reads the existing source maps, there may be
		* cases where some report "outputs" include "inputs" that don't exist
		* in the main "inputs" object. To avoid this, we parse each esbuild
		* input and add its sources to the "inputs" object.
		*/
		addSourcesToInputs(resolve(cwd, path), acc);
		return acc;
	}, {});
	generateReportFromAssets(Object.keys(metafile.outputs).map((path) => resolve(cwd, path)), inputs, options);
}

//#endregion
export { SondaEsbuildPlugin, processEsbuildMetaFile };
//# sourceMappingURL=esbuild.mjs.map