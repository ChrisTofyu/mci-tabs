"use strict";
const require_src = require('./src.cjs');
const path = require_src.__toESM(require("path"));

//#region src/entrypoints/webpack.ts
var SondaWebpackPlugin = class {
	options;
	constructor(options = {}) {
		this.options = options;
	}
	apply(compiler) {
		if (this.options.enabled === false) return;
		compiler.options.output.devtoolModuleFilenameTemplate = "[absolute-resource-path]";
		compiler.hooks.afterEmit.tapPromise("SondaWebpackPlugin", (compilation) => {
			const inputs = {};
			const stats = compilation.getStats().toJson({
				modules: true,
				providedExports: true
			});
			const outputPath = stats.outputPath || compiler.outputPath;
			const modules = stats.modules?.flatMap((mod) => mod.modules ? [mod, ...mod.modules] : mod).filter((mod) => mod.nameForCondition && !mod.codeGenerated).filter((mod, index, self) => self.findIndex((m) => m.nameForCondition === mod.nameForCondition) === index) || [];
			modules.forEach((module$1) => {
				const imports = modules.reduce((acc, { nameForCondition, issuerName, reasons }) => {
					if (issuerName === module$1.name || reasons?.some((reason) => reason.resolvedModule === module$1.name)) acc.push(require_src.normalizePath(nameForCondition));
					return acc;
				}, []);
				inputs[require_src.normalizePath(module$1.nameForCondition)] = {
					bytes: module$1.size || 0,
					format: getFormat(module$1),
					imports,
					belongsTo: null
				};
			});
			return require_src.generateReportFromAssets(stats.assets?.map((asset) => (0, path.resolve)(outputPath, asset.name)) || [], inputs, this.options);
		});
	}
};
function getFormat(module$1) {
	if (!require_src.jsRegexp.test(module$1.nameForCondition)) return "unknown";
	/**
	* Sometimes ESM modules have `moduleType` set as `javascript/auto`, so we
	* also need to check if the module has exports to determine if it's ESM.
	*/
	if (module$1.moduleType === "javascript/esm" || !!module$1.providedExports?.length) return "esm";
	return "cjs";
}

//#endregion
Object.defineProperty(exports, 'SondaWebpackPlugin', {
  enumerable: true,
  get: function () {
    return SondaWebpackPlugin;
  }
});
//# sourceMappingURL=webpack.cjs.map